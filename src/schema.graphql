type Query {
  me: User!
  post: Post!
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  comments: [Comment!]!
  add(numbers: [Float!]!): Float!
  hello(name: String, email: String): String!
  grades: [Int!]!
  height: Float
  isNice: Boolean
}

type Mutation {
  createUser(data: createUserInput): User!
  createPost(data: createPostInput): Post!
  createComment(data: createCommentInput): Comment!
}

input createUserInput {
  name: String!
  email: String!
  age: String
}

input createPostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  age(num: Int): Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}